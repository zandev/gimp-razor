#!/bin/bash
# Copyright (C) 2010 StÃ©phane Robert Richard.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
# 3. Neither the name of the project nor the names of its contributors
#    may be used to endorse or promote products derived from this software
#    without specific prior written permission.
# 
# THIS SOFTWARE IS PROVIDED BY THE PROJECT AND CONTRIBUTORS ``AS IS'' AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT SHALL THE PROJECT OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.


###
## Initialization

  set -u
  set -e

  # script/directory real name/location
  pushd $(dirname $(readlink -f "$BASH_SOURCE")) > /dev/null
  readonly script_dir="$PWD"
  popd > /dev/null
  readonly script_name=$(basename $0)

  # Environment variables initialization
  for var in PKG_CONFIG_PATH LD_LIBRARY_PATH; do
    declare $var=''
  done

##
###


###
## Configuration: Here you have the oportunity, expected that you know what you're doing, to tweak the configuration to suit your needs. 

##
###



###
## FUNCTIONS

  ###
  ## HELPERS

    log_entry() {
      echo
      printf -vch  "%80s" ""
      printf "%s\n" "${ch// /$1}"
      echo "$1$1  $2"
      echo
    }

    log_task(){
      log_entry '#' "$@"
    }

    log_section() {
      log_entry '=' "$@"
    }

    log_message() {
      log_entry '-' "$@"
    }
    
    log_warning(){
      log_entry '!' "WARNING: $@"
    }

    ask_user() {
      echo -n "--  $@: " | fold -s -w 80
    }

    exit_with(){
      echo "ERROR (exit code $?): $1"
      exit $?
    }

  ##
  ###


  ###
  ## TASKS

    mkdirs(){
      log_section "Creating directories"
      local dirs=( "$_config_opt_dir" "$_config_src_dir" "$_config_gimp_install_dir" )
      for dir in ${dirs[@]}; do
        mkdir -vp $dir || exit_with "An error occured while trying to create $dir"
      done
    }

    install_pkg_config_deps(){
      log_section "Installing required apt dependencies"
      ${_config_pkg_cmd} $_config_deps || exit_with "package management fails while trying to install the following dependencies $_config_deps"
    }

    update_git_repository(){
      local repo_name="$(basename $1)"
      local repo="git://git.gnome.org/$repo_name"
      log_section "Checking state of git repository $repo"
      if [ -d "$1" ]; then
        cd "$1"
        if git status; then
          log_message "Local repository $repo_name already exist, updating from remote master"
          git checkout master
          git pull --rebase || exit_with "git failed while trying to pull from master repository $repo"
        else
          log_message "$1 is not a git repository, cleaning"
          ask_user "$script_name is going to remove the directory $1 and all it's content. Proceed? [Y/n]"
          read input
          [ "$(echo ${input:-Y} | tr [a-z] [A-Z])" == 'Y' ] && rm -rfv "$1"
          update_git_repository
        fi
      else
        log_message "Cloning git://git.gnome.org/$repo_name in $1"
        cd "$(dirname $1)"
        git clone "git://git.gnome.org/$repo_name" || exit_with "git failed while trying to clone repository $repo"
      fi
    }

    update_repositories(){
      log_section "Updating repositories"
      for repo in babl gegl gimp; do
        update_git_repository "$_config_src_dir/$repo"
      done
    }

    get_commit_id(){
      cd "$_config_gimp_src_dir"
      echo "git describe" | tr 'A-Z' 'a-z' | sed 's/[^a-zA-Z0-9_-]/-/g'
    }

    list_branches(){
      cd "$_config_gimp_src_dir"
      git branch -r | awk -F'/' '{print $2}'
    }

    list_releases(){
      cd "$_config_gimp_src_dir"
      git tag
    }

    prepare_release(){
      local release="$_config_gimp_release"
      if [ "$_config_gimp_release" == 'current' ]; then
        for dir in {gimp,babl,gegl}_config_src_dir; do
          cd "${!dir}"
          git checkout master
        done
      else
        cd "$_config_gimp_src_dir"
        git checkout "$_config_gimp_release"
        
        cd "$_config_babl_src_dir"
        git checkout $_config_babl_release

        cd "$_config_gegl_src_dir"
        git checkout $_config_gegl_release
      fi
    }

    build(){
      local name="$(basename $1)"
      log_section "Building $name"
      cd "$1"

      log_message "Executing 'autogen.sh' for '$name'"
      ./autogen.sh --prefix="$_config_gimp_install_dir" || exit_with "while executing ${name}'s autogen.sh"

      log_message "Executing 'make clean' for '$name'"
      make clean || exit_with "while executing 'make clean' for $name"

      log_message "Executing 'make -j $_config_processors' for '$name'"
      make -j $_config_processors || exit_with "while executing 'make' for $name"

      log_message "Executing 'make install' for '$name'"
      make install || exit_with "while executing 'make install' for $name"
    }

    build_all(){
      build "$_config_babl_src_dir"
      build "$_config_gegl_src_dir"
      build "$_config_gimp_src_dir"
    }

    launch_gimp(){
      local cmd="$_config_gimp_install_dir/bin/gimp-2.*" 
      $cmd || exit_with "while trying to launch your rounded edge gimp :("
    }

    show_config(){
      cat "$script_dir/$script_name" | egrep '^ *_config_[a-z_]+=' | sed 's/^ *_config_//'
    }

  ##
  ###
  
  ###
  ## ACTIONS

    do_dep(){
      install_pkg_config_deps
    }

    do_src(){
      update_repositories
    }

    do_build(){
      prepare_release
      build_all
      launch_gimp
    }

    do_releases(){
     list_releases
    }

    do_branches(){
      list_branches
    }

    do_all(){
      install_pkg_config_deps
      update_repositories
      prepare_release
      build_all
      launch_gimp
    }

    # Undocumented
    do_config(){
      show_config
    }
  
  ##
  ###

##
###


###
## Main

  ###
  ## Default configuration

_config_opt_dir="$HOME/opt"
_config_src_dir="$HOME/src/git"
_config_build_id="$(date +'%Y-%m-%d-%H-%M-%S')"
_config_gimp_install_dir="$_config_opt_dir/gimp/build_$_config_build_id"
_config_gimp_src_dir="$_config_src_dir/gimp"
_config_babl_src_dir="$_config_src_dir/babl"
_config_gegl_src_dir="$_config_src_dir/gegl"
_config_processors="$(cat /proc/cpuinfo | grep processor | wc -l)"
_config_pkg_cmd="sudo apt-get install"
_config_gimp_release=master
_config_babl_release=master
_config_gegl_release=master
_config_deps="fontconfig gtk-doc-tools intltool libcairo2 libdbus-glib-1-2 libexif-dev libfontconfig1 libfreetype6 libgdk-pixbuf2.0-0 libgtk-3-0 libjasper-dev libjpeg62-dev liblcms1-dev liblcms-dev libmng-dev libopenexr-dev libpango1.0-0 libpng-dev libpoppler-dev librsvg2-common librsvg2-dev libtiff4-dev libtiff-tools libtool libwebkit-dev libwmf-dev pkg-config python-dev python-gtk2-dev ruby"
    export PATH="$_config_gimp_install_dir/bin:$PATH"
    export PKG_CONFIG_PATH="$_config_gimp_install_dir/lib/pkgconfig:$PKG_CONFIG_PATH"
    export LD_LIBRARY_PATH="$_config_gimp_install_dir/lib:$LD_LIBRARY_PATH"
    export CFLAGS="-march=native"

  ##
  ###
  
  
  ###
  ## Resolving configuration directory
    
    if [ -z ${gimprazor_recipes_dir:-""} ]; then

      recipes_dirs="
        $HOME/.config/$script_name
        $HOME/.$script_name
        /etc/$script_name
        /usr/local/etc/$script_name
        /opt/etc/script_name
        $script_dir/config"

      gimprazor_recipes_dir=

      for d in $recipes_dirs; do
        for localdir in $d/gimp-razor; do
          if [ -d "$localdir" ]; then
            readonly gimprazor_recipes_dir="$localdir"
            break
          fi
        done
      done

    fi

    if [ ! -z "$gimprazor_recipes_dir" ]; then 
      source "$gimprazor_recipes_dir/$user_recipe"
    fi

  ##
  ###


  ###
  ## Parse command line

  if [[ "$#" > 2 ]]; then
    echo Wrong paramter count
    show_help
    exit 1
  fi

  readonly available_actions="dep|src|build|releases|branches|all|config" 
  readonly available_recipes=''
  readonly user_action="${1:-default}"
  readonly user_recipe="${2:-default}"


  show_help() {
    echo "
USAGE 
    $script_name [action] [recipe]
WHERE
    action is one of: $available_actions
    recipe is one of: $available_recipes

ACTIONS
    dep       Install required dependencies using the configured package management
    src       Retrieve or update the source files
    build     Build the gimp
    releases  Display available releases (git tags) in source repository
    branches  Display available branches in source repository
    all       Short cut for dep, src and build
    config    Output a default configuration file
"
  }
   
   
  if ! [[ "$user_action" =~ ^($available_actions)$ ]]; then
    echo "Unknow action $1"
    show_help
    exit 1
  fi
  
  cmd="do_$user_action"
  $cmd
  
