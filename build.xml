<project name="gimp-razor" default="help">

	<!-- ========================================================================================= -->
	<!-- 									Datatypes                                			   -->
	<!-- ========================================================================================= -->

	<!--taskdef resource="net/sf/antcontrib/antcontrib.properties">
		<classpath>
			<pathelement location="/usr/share/java/ant-contrib-1.0b3.jar" />
		</classpath>
	</taskdef-->

	<tstamp>
		<format property="current.time" pattern="yyyy-MM-dd-HH-mm-ss" />
	</tstamp>

	<!-- ========================================================================================= -->
	<!-- 									Properties                                			   -->
	<!-- ========================================================================================= -->

	<property name="config.dir" location="${basedir}/config" />
	<property name="config.default.file" location="${config.dir}/default" />
	<property name="recipe.name" value="default" />
	<property name="recipe.file" location="${config.dir}/${recipe.name}" />
	<property file="${recipe.file}" prefix="cfg"/>
	<property environment="env" />

	<!-- User properties -->

	<property name="cfg.processors" value="$(cat /proc/cpuinfo | grep processor | wc -l)" />
	<property name="cfg.build.id" value="${current.time}" />


	<property name="cfg.opt.dir" location="${user.home}/opt" />
	<property name="cfg.src.dir" location="${user.home}/src/git" />
	<property name="cfg.gimp.install.dir" location="${cfg.opt.dir}/gimp/build_${cfg.build.id}" />
	<property name="cfg.gimp.src.dir" location="${cfg.src.dir}/gimp" />
	<property name="cfg.babl.src.dir" location="${cfg.src.dir}/babl" />
	<property name="cfg.gegl.src.dir" location="${cfg.src.dir}/gegl" />


	<property name="cfg.gimp.release" value="master" />
	<property name="cfg.babl.release" value="master" />
	<property name="cfg.gegl.release" value="master" />
	<property name="cfg.pkg.cmd" value="sudo apt-get install" />
	<property name="cfg.pkg.dependencies" value="fontconfig gtk-doc-tools intltool libcairo2 libdbus-glib-1-2 libexif-dev libfontconfig1 libfreetype6 libgdk-pixbuf2.0-0 libgtk-3-0 libjasper-dev libjpeg62-dev liblcms1-dev liblcms-dev libmng-dev libopenexr-dev libpango1.0-0 libpng-dev libpoppler-dev librsvg2-common librsvg2-dev libtiff4-dev libtiff-tools libtool libwebkit-dev libwmf-dev pkg-config python-dev python-gtk2-dev ruby" />

	<property name="cfg.env.PATH" value="${cfg.gimp.install.dir}/bin:${env.PATH}" />
	<property name="cfg.env.PKG_CONFIG_PATH" value="${cfg.gimp.install.dir}/lib/pkgconfig:${env.PKG_CONFIG_PATH}" />
	<property name="cfg.env.LD_LIBRARY_PATH" value="${cfg.gimp.install.dir}/lib:${env.LD_LIBRARY_PATH}" />
	<property name="cfg.env.CFLAGS" value="-march=native" />

	<property name="cfg.babl.configure.cmd" value="./autogen.sh --prefix=${cfg.gimp.install.dir}" />
	<property name="cfg.babl.build.cmd" value="make clean; make -j ${cfg.processors}" />
	<property name="cfg.babl.install.cmd" value="make install" />

	<property name="cfg.gegl.configure.cmd" value="./autogen.sh --prefix=${cfg.gimp.install.dir}" />
	<property name="cfg.gegl.build.cmd" value="make clean; make -j ${cfg.processors}" />
	<property name="cfg.gegl.install.cmd" value="make install" />

	<property name="cfg.gimp.configure.cmd" value="./autogen.sh --prefix=${cfg.gimp.install.dir}" />
	<property name="cfg.gimp.build.cmd" value="make clean; make -j ${cfg.processors}" />
	<property name="cfg.gimp.install.cmd" value="make install" />



	<!-- ========================================================================================= -->
	<!-- 								Public targets	                                		   -->
	<!-- ========================================================================================= -->

	<!-- ================================= 
          target: mkdirs              
         ================================= -->
	<target name="mkdirs" depends="" description="Create required directories">
		<mkdir dir="${cfg.opt.dir}" />
		<mkdir dir="${cfg.babl.src.dir}" />
		<mkdir dir="${cfg.gegl.src.dir}" />
		<mkdir dir="${cfg.gimp.src.dir}" />
		<mkdir dir="${cfg.gimp.install.dir}" />
	</target>

	<!-- ================================= 
          target: installdeps              
         ================================= -->
	<target name="installdeps" depends="" description="Installing required dependencies, using the configured package management system">
		<shellscript shell="bash">${cfg.pkg.cmd} ${cfg.pkg.dependencies}</shellscript>
	</target>

	<!-- ================================= 
          target: fetch              
         ================================= -->
	<target name="fetch" depends="mkdirs, -clone-babl, -clone-gegl, -clone-gimp" description="Retrieve sources from their remote git repositories">
	</target>

	<!-- ================================= 
          target: update              
         ================================= -->
	<target name="update" depends="mkdirs,fetch" description="Update sources to the latest changes">
		<git-update dir="${cfg.babl.src.dir}" />
		<git-update dir="${cfg.gegl.src.dir}" />
		<git-update dir="${cfg.gimp.src.dir}" />
	</target>

	<!-- ================================= 
          target: usage, help              
         ================================= -->
	<target name="usage">
		<echo message="  Execute '${ant.project.name} -p' for build file help." />
		<echo message="  Execute '${ant.project.name} -h' for Ant help." />
		<exec executable="ant">
			<arg value="-p" />
		</exec>
	</target>

	<target name="help" depends="usage" />

	<!-- ================================= 
          target: build              
         ================================= -->
	<target name="build" depends="-build-babl" description="Build babl, gegl and the gimp">

	</target>

	<!-- ================================= 
          target: generate-config              
         ================================= -->
	<target name="generate-config" description="Generate a default configuration file">
		<echoproperties destfile="${config.default.file}">
			<propertyset>
				<propertyref prefix="cfg" />
			</propertyset>
		</echoproperties>
	</target>





	<!-- ========================================================================================= -->
	<!-- 									Macrodefs	                                		   -->
	<!-- ========================================================================================= -->

	<macrodef name="shellscript">
		<attribute name="shell" />
		<attribute name="dir" />
		<attribute name="flag" />
		<attribute name="command" />
		<sequential>
			<exec executable="@{shell}" dir="@{dir}">
				<arg value="@{flag}" />
				<arg value="@{command}" />
			</exec>
		</sequential>
	</macrodef>

	<macrodef name="git">
		<attribute name="command" />
		<attribute name="dir" default="" />
		<element name="args" optional="true" />
		<sequential>
			<echo message="git @{command}" />
			<exec executable="git" dir="@{dir}" failonerror="no">
				<arg value="@{command}" />
				<args />
			</exec>
		</sequential>
	</macrodef>

	<macrodef name="git-clone">
		<attribute name="repository" />
		<attribute name="dest" />
		<sequential>
			<git command="clone">
				<args>
					<arg value="@{repository}" />
					<arg value="@{dest}" />
				</args>
			</git>
		</sequential>
	</macrodef>


	<macrodef name="git-update">
		<attribute name="dir" />
		<sequential>
			<echo>--------------------------------</echo>
			<echo>Updating @{dir}</echo>
			<echo>--------------------------------</echo>
			<git command="checkout" dir="@{dir}">
				<args>
					<arg value="master" />
				</args>
			</git>
			<git command="pull" dir="@{dir}">
				<args>
					<arg value="--rebase" />
				</args>
			</git>
		</sequential>
	</macrodef>

	<macrodef name="probe-git">
		<attribute name="name" />
		<attribute name="dir" />
		<attribute name="resultproperty" />
		<sequential>
			<exec executable="git" dir="@{dir}" failonerror="no" resultproperty="@{resultproperty}">
				<arg value="status" />
			</exec>
			<condition property="@{name}.src.dir.is.git">
				<equals arg1="${@{resultproperty}}" arg2="0" trim="true" />
			</condition>
			<condition property="@{name}.src.dir.exist">
				<available file="@{dir}" type="dir" />
			</condition>
			<condition property="@{name}.src.dir.delete">
				<and>
					<isset property="@{name}.src.dir.exist" />
					<not>
						<isset property="@{name}.src.dir.is.git" />
					</not>
				</and>
			</condition>
		</sequential>
	</macrodef>

	<macrodef name="prepare-src-dir">
		<attribute name="name" />
		<attribute name="dir" />
		<sequential>
			<input message="The directory '@{dir}' exist but is not a git repository, all content will be removed. Proceed (y/n)?" validargs="y,n" addproperty="do.delete.@{name}" />
			<condition property="do.delete.@{name}.abort">
				<equals arg1="n" arg2="${do.delete.@{name}}" />
			</condition>
			<fail if="do.delete.@{name}.abort">${ant.project.name} aborted by user. You may need to fix the directory '@{dir}' manually and run ${ant.project.name} again.</fail>
			<delete dir="@{dir}" />
		</sequential>
	</macrodef>


	<!-- ========================================================================================= -->
	<!-- 								Private targets	                                		   -->
	<!-- ========================================================================================= -->

	<!-- - - - - - - - - - - - - - - - - - 
          target: -init-properties                      
         - - - - - - - - - - - - - - - - - -->
	<target name="-init-properties">

	</target>


	<!-- - - - - - - - - - - - - - - - - - 
          target: -probe-babl                      
         - - - - - - - - - - - - - - - - - -->
	<target name="-probe-babl" depends="mkdirs">
		<probe-git name="babl" dir="${cfg.babl.src.dir}" resultproperty="babl.git.status" />
	</target>

	<!-- - - - - - - - - - - - - - - - - - 
          target: -probe-gegl                      
         - - - - - - - - - - - - - - - - - -->
	<target name="-probe-gegl" depends="mkdirs">
		<probe-git name="gegl" dir="${cfg.gegl.src.dir}" resultproperty="gegl.git.status" />
	</target>

	<!-- - - - - - - - - - - - - - - - - - 
          target: -probe-gimp                      
         - - - - - - - - - - - - - - - - - -->
	<target name="-probe-gimp" depends="mkdirs">
		<probe-git name="gimp" dir="${cfg.gimp.src.dir}" resultproperty="gimp.git.status" />
	</target>

	<!-- - - - - - - - - - - - - - - - - - 
          target: -prepare-babl-src-dir                      
         - - - - - - - - - - - - - - - - - -->
	<target name="-prepare-babl-src-dir" if="${babl.src.dir.delete}">
		<prepare-src-dir name="babl" dir="${cfg.babl.src.dir}" />
	</target>

	<!-- - - - - - - - - - - - - - - - - - 
          target: -prepare-gegl-src-dir                      
         - - - - - - - - - - - - - - - - - -->
	<target name="-prepare-gegl-src-dir" if="${gegl.src.dir.delete}">
		<prepare-src-dir name="gegl" dir="${cfg.gegl.src.dir}" />
	</target>

	<!-- - - - - - - - - - - - - - - - - - 
          target: -prepare-			">gimp-src-dir                      
         - - - - - - - - - - - - - - - - - -->
	<target name="-prepare-gimp-src-dir" if="${gimp.src.dir.delete}">
		<prepare-src-dir name="gimp" dir="${cfg.gimp.src.dir}" />
	</target>


	<!-- - - - - - - - - - - - - - - - - - 
          target: -clone-babl                      
         - - - - - - - - - - - - - - - - - -->
	<target name="-clone-babl" depends="mkdirs, -probe-babl, -prepare-babl-src-dir" unless="${babl.src.dir.is.git}">
		<git-clone repository="git://git.gnome.org/babl" dest="${cfg.babl.src.dir}" />
	</target>

	<!-- - - - - - - - - - - - - - - - - - 
          target: -clone-gegl                      
         - - - - - - - - - - - - - - - - - -->
	<target name="-clone-gegl" depends="mkdirs, -probe-gegl, -prepare-gegl-src-dir" unless="${gegl.src.dir.is.git}">
		<git-clone repository="git://git.gnome.org/gegl" dest="${cfg.gegl.src.dir}" />
	</target>

	<!-- - - - - - - - - - - - - - - - - - 
          target: -clone-gimp                      
         - - - - - - - - - - - - - - - - - -->
	<target name="-clone-gimp" depends="mkdirs, -probe-gimp, -prepare-gimp-src-dir" unless="${gimp.src.dir.is.git}">
		<git-clone repository="git://git.gnome.org/gimp" dest="${cfg.gimp.src.dir}" />
	</target>

	<!-- - - - - - - - - - - - - - - - - - 
          target: -build-babl                      
         - - - - - - - - - - - - - - - - - -->
	<target name="-build-babl">
		<shellscript shell="bash" dir="${cfg.babl.src.dir}" flag="-c" command="
			${cfg.babl.configure.cmd}
			${cfg.babl.build.cmd}
			${cfg.babl.install.cmd}
			">
		</shellscript>
	</target>


</project>